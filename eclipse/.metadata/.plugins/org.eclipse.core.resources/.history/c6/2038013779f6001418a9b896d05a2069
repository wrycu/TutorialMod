package com.wrycu.tutorial;

import java.util.Random;

import net.minecraft.block.Block;
import net.minecraft.block.state.IBlockState;
import net.minecraft.block.state.pattern.BlockHelper;
import net.minecraft.init.Blocks;
import net.minecraft.util.BlockPos;
import net.minecraft.world.World;
import net.minecraft.world.gen.feature.WorldGenerator;

public class StructureGeneration extends WorldGenerator {

	@Override
	public boolean generate(World worldIn, Random rand, BlockPos pos) {
		// No one cares about checking if it's valid
		int startX = pos.getX();
		int startY = 65;
		int startZ = pos.getZ();
		int layers = 3;
		
		// Max sizes
		int size_x = 18;
		int size_z = 7;
		// THis is a horrible way of doing it until I find some automatic way to get it done
		BlockPos newPos = new BlockPos(startX, startY, startZ);
		int layer1[][] = new int[18][7];
		int layer2[][] = new int[18][7];
		int layer3[][] = new int[18][7];
		// Layer 1
		
		// Layer 2
				
		// Layer 3
				
		// Layer 1 (the bottom)
		worldIn.setBlockState(newPos, Blocks.planks.getDefaultState());
		for (int i = 0; i < 4; i++)
		{
			newPos = new BlockPos(startX, startY, startZ + i);
			worldIn.setBlockState(newPos, Blocks.planks.getDefaultState());
		}
		
		// This row is 3 to the left
		startZ = pos.getZ() - 3;
		for (int k = 1; k < 4; k++)
		{
			for (int i = 0; i < 10; i++)
			{
				newPos = new BlockPos(startX + k, startY, startZ + i);
				worldIn.setBlockState(newPos, Blocks.planks.getDefaultState());
			}
		}
		// Move up past what we've placed and undo the -3 we did earlier
		startX = startX + 4;
		startZ = pos.getZ();
		for (int i = 0; i < 4; i++)
		{
			newPos = new BlockPos(startX, startY, startZ + i);
			worldIn.setBlockState(newPos, Blocks.planks.getDefaultState());
		}
		
		// Layer 2
		
		
		return true;
	}

}
